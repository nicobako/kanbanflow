{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Managing API Tokens\n",
    "\n",
    "Storing API tokens can be quite a pain,\n",
    "so `kanbanflow` offers a `TokenManager` class\n",
    "to help ease this.\n",
    "\n",
    "See `kanbanflow.TokenManager`\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "Note: There is nothing really special about\n",
    "this class other than the convenience it offers.\n",
    "Tokens are stored in a *json* file, and there is no encryption.\n",
    "If you have a better way of storing tokens,\n",
    "such as through environment variables, etc.,\n",
    "feel free to do that.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating the `TokenManager`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import kanbanflow as kbf\n",
    "from pathlib import Path\n",
    "\n",
    "token_manager = kbf.TokenManager()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The path to the token file defaults to `~/.kanbanflow/tokens.json`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.token_file.relative_to(Path.home())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, you can change this by providing a path in the constructor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager = kbf.TokenManager(\"my-token-file.json\")\n",
    "\n",
    "token_manager.token_file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is useful if you want your own file in a specific location."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Storing Tokens\n",
    "\n",
    "Tokens are stored in *name-token* pairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "name = \"token-name\"\n",
    "token = \"the-actual-api-token\"\n",
    "\n",
    "token_manager.store(name=name, token=token)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retrieving Tokens\n",
    "\n",
    "Tokens are retrieved by their name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.retrieve(name=name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Listing Tokens\n",
    "\n",
    "You can get a list of all the tokens available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.store(name=\"another-token-name\",token=\"another-api-token\")\n",
    "token_manager.names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Tokens\n",
    "\n",
    "Tokens can be removed by name as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.remove(name=name)\n",
    "\n",
    "token_manager.names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clearing all Tokens\n",
    "\n",
    "All tokens can be deleted with one call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.clear()\n",
    "\n",
    "token_manager.names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "token_manager.token_file.unlink()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "kanbanflow-venv",
   "language": "python",
   "name": "kanbanflow-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
